spring:
  application:
    name: restfulSpringApp

  # 운영환경(prod), 개발환경(dev), 로컬환경(local)을 분리한다.
  profiles:
    # default profile env
    active: local
    # profile 에 다른 profile 설정을 추가할 수 있다.(주로, 공통에 적용될 설정 aws etc...)
    # include: aws, common

---
spring:
  config:
    activate:
      on-profile: local

  # h2 db config
  h2:
    console:
      path: /h2-console # console url path default val
      enabled: true # console enable
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: root
    password:
    driver-class-name: org.h2.Driver

  # jackson lib config
  jackson:
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false
    date-format: yyyy-MM-dd HH:mm:ss

# 커스텀 프로퍼티
env:
  loading:
    message: "==================Loading <Local> Profile=================="

logging:
  level:
    # TRACE > DEBUG > INFO > WARN > ERROR > FATAL
    com.dev.boot_study : "INFO"
    root: "INFO"

# Lombok lib config
## @Slf4j 어노테이션이 있을 경우 롬복이 아래의 로거 필드를 자동생성해준다.
## private final Logger log = LoggerFactory.getLogger(LogExample.class);
## 기본 필드 명은 log. application.properties 에서 lombok.log.fieldName 값을 바꿔서 변경 가능하다.
lombok:
  log:
    fieldName: "LOGGER"

---

config:
  activate:
    on-profile: dev

# 커스텀 프로퍼티
env:
  loading:
    message: "==================Loading <Dev> Profile=================="



# 미사용 설정
#spring:
#  sql:
#    init:
#      schema-locations: classpath*:schema.sql
#      data-locations: classpath*:data.sql
#
#  # mySQL db config
#  datasource:
#    url: jdbc:mysql://localhost:3306/chap14?useUnicode=yes&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=Asia/Seoul
#    username: root
#    password: rootpw
#    driver-class-name: com.mysql.cj.jdbc.Driver
#
#  # jpa config
#  jpa:
#    database: h2
#    #properties.hibernate.dialect: org.hibernate.dialect.H2Dialect
#    hibernate:
#      # 데이터베이스 초기화 전략을 설정합니다.
#      # 변경이 필요한 경우 alter, 테이블이 없는 경우에는 create
#      ddl-auto: update
#      # 아무것도 실행하지 않는다.
#      ddl-auto: none
#      # SessionFactory가 시작될 때 기존테이블을 삭제 후 다시 생성합니다.
#      ddl-auto: create
#      # create와 같으나 SessionFactory가 종료될 때 drop을 실행합니다.
#      ddl-auto: create-drop
#      # 엔티티와 테이블이 정상적으로 매핑되었는지만 확인합니다.
#      ddl-auto: validate
#      # 콘솔에 출력되는 JPA 실행 쿼리를 가독성있게 표현합니다.
#      format_sql: true
#      default_batch_fetch_size: 1000
#    # 콘솔에 JPA 실행 쿼리를 출력한다. 개발환경은 true, 운영은 false
#    show-sql: true
#    properties:
#      hibernate:
#        use_sql_comments: true
#    defer-datasource-initialization: true
#    generate-ddl: true
#    #JPA에 사용할 데이터베이스 플랫폼을 지정한다.
#    database-platform: org.hibernate.dialect.H2Dialect
#
#  # mybatis lib config
#  ## default is same directory of Mapper
#  mybatis:
#  mapper-locations: classpath:mybatis/mapper/**/**.xml
#  configuration:
#  map-underscore-to-camel-case: true
#  type-aliases-package: com.devrun.db.domain
#
#  # Thymeleaf lib config
#  thymeleaf:
#  cache: false
#
#  # mvc view config
#  mvc:
#    view:
#      prefix: /WEB-INF/views/
#      suffix: .jsp
